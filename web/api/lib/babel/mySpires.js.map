{"version":3,"sources":["../mySpires.js"],"names":["mySpires","preparing","undefined","Promise","resolve","api","then","data","user","tagauthors","taglist","Object","keys","tagopts","bind","args","reject","$","ajax","type","url","server","success","response","maintenance","post","dataType","xhrFields","withCredentials","error","tag","results","mySpires_Records","catch","console","log","timeframe","mySpires_Record","query","field","source","busy","load","record","id","inspire","arxiv","arxiv_v","bibkey","title","author","abstract","published","tags","comments","updated","status","toString","split","trim","q","result","property","value","opts","save","remove","records","key"],"mappings":"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","file":"mySpires.js","sourcesContent":["/**\n * @file This file is part of the core mySpires-API. It defines useful mySpires classes which parallel the respective PHP classes in mySpires.php. They talk to each other via \"/api\" on mySpires server.\n *\n * @author Akash Jain\n */\n\nclass mySpires {\n\n    /**\n     * Some properties might require a little bit of waiting. For that purpose, prepare mySpires with .prepare() and\n     * use the promise to use prepared properties.\n     * Note that subsequent calling of .prepare() will not prepare again, but will return the old promise.\n     * So to be sure, prepare whenever you use a property which needs preparation.\n     * @return {Promise} Resolves when prepared.\n     */\n    static prepare() {\n        if(this.preparing === undefined) {\n            this.preparing = new Promise((resolve) => {\n                this.api().then(function(data) {\n                    this.user = data.user;\n                    this.tagauthors = data.tagauthors;\n                    this.taglist = Object.keys(this.tagauthors);\n                    this.tagopts = data.tagopts;\n                    resolve();\n                }.bind(this));\n            });\n        }\n        return this.preparing;\n    }\n\n    /**\n     * Returns path to the mySpires-API server.\n     * @returns {string} - Path to mySpires API server\n     */\n    static get server() {\n        // return \"http://localhost/~akash/mySpires/server/\"; // TODO: Local\n        // return \"https://www.maths.dur.ac.uk/~tjtm88/mySpires/\";\n        return \"https://myspires.ajainphysics.com/\";\n        // return \"/\"; // Experimental\n    }\n\n    /**\n     * Calls a file from the mySpires-API and returns the response.\n     * @param {object} [args] - Options to pass. To be read as $_POST array by the API\n     * @returns {Promise} - A promise which resolves to the response from the API\n     */\n    static api(args) {\n        return new Promise((resolve, reject) => {\n            $.ajax({\n                type: \"POST\",\n                url: this.server + \"api/\",\n                data: args,\n                success: function (response) {\n                    if(response) {\n                        if(response.maintenance) {\n                            $.post(this.server + \"api/maintenance.php\");\n                            resolve(response.data);\n                        }\n                        else resolve(response);\n                    }\n                    else reject({\n                        mySpires: \"API sent an inappropriate reply!\",\n                        args: args\n                    });\n                }.bind(this),\n                dataType: \"json\",\n                xhrFields: {\n                    withCredentials: true\n                },\n                error: function() {\n                    reject({\n                        mySpires: \"API did not reply!\",\n                        args: args\n                    });\n                }\n            });\n        });\n    }\n\n    static tag(tag) {\n        return new Promise((resolve) => {\n            this.api({tag: tag}).then(function (results) {\n                resolve(new mySpires_Records(results));\n            }).catch(console.log);\n        })\n    }\n\n    static timeframe(timeframe) {\n        return new Promise((resolve) => {\n            this.api({timeframe: timeframe}).then(function (results) {\n                resolve(new mySpires_Records(results));\n            }).catch(console.log);\n        })\n    }\n}\n\n/**\n * This class parallels the PHP.mySpires_Record class. It interprets the result sent out by the mySpires API and attaches essential manipulation tools.\n *\n * While using mySpires_Record, always wait for the .busy promise to resolve before accessing the values. In built functions should automatically take this into account, by adding operations to a pending queue. For example after a bunch of operations of the kind\n * <code>\n *     $record = (new mySpires_record).load(\"1\", \"id\").set(\"comments\", \"jain\").save();\n * </code>\n * you should wait to access properties\n * <code>\n *     $record.busy.then(function() {\n *         console.log($record.comments);\n *     });\n * </code>\n *\n * @constructor\n */\nclass mySpires_Record {\n    /**\n     * The only way to construct a mySpires_Record object is via the results sent out from the mySpires servers. You can either directly feed in the JSON sub-element corresponding to a result, or feed in parameters to perform the search.\n     */\n    constructor(query, field, source) {\n        this.busy = Promise.resolve();\n\n        switch(typeof(query)) {\n            case \"string\":\n                this.load(query, field, source);\n                break;\n            case \"object\":\n                this.data(query);\n        }\n    }\n\n    /**\n     * Loads a PHP.mySpires_Record object sent by the mySpires server.\n     * @param {Object} record - Record object form mySpires server.\n     */\n    data(record) {\n        if(!record) return;\n\n        this.id = record.id;\n        this.inspire = record.inspire;\n        this.arxiv = record.arxiv;\n        this.arxiv_v = record.arxiv_v;\n        this.bibkey = record.bibkey;\n        this.title = record.title;\n        this.author = record.author;\n        this.abstract = record.abstract;\n        this.published = record.published;\n        this.tags = record.tags;\n        this.comments = record.comments;\n        this.updated = record.updated;\n        this.status = record.status;\n    }\n\n    /**\n     * Load data from the mySpires server.\n     * @param {string} query - Query to be sent.\n     * @param {string} [field] - Field of query. Default value is \"id\".\n     * @param {string} source - Source of query. Default value is \"\".\n     */\n    load(query, field = \"id\", source = \"\") {\n        query = query.toString().split(\",\")[0].trim(); // TODO: Fallback?\n\n        // Continue after the current task has finished.\n        this.busy = new Promise((resolve, reject) => {\n            this.busy.then(function() {\n                mySpires.api({q: query, field: field, source: source }).then(function(results) {\n                    let result = results[query];\n                    // If the result does not exist, attach the query to it so that it can be saved later.\n                    if(!result) {\n                        result = {};\n                        result[field] = query;\n                    }\n                    this.data(result);\n                    resolve();\n                }.bind(this)).catch(reject);\n            }.bind(this));\n        });\n        return this;\n    }\n\n    /**\n     * This function sets a property after the queue of operations has finished.\n     * Always use this function to set properties, to avoid any clashes with pending ajax operations.\n     * @param {string} property - Property to change.\n     * @param {string} value - New value of the property.\n     * @returns {mySpires_Record} - Returns for chaining.\n     */\n    set(property, value) {\n        this.busy.then(function() {\n            this[property] = value;\n        }.bind(this));\n        return this;\n    }\n\n    /**\n     * Saves or updates a record in user's library.\n     * @returns {mySpires_Record} Returns for chaining.\n     */\n    save() {\n        // Set to busy again\n        this.busy = new Promise((resolve, reject) => {\n            this.busy.then(function() { // Continue after last task has finished.\n                let opts;\n                if(this.id) opts = {save: this.id, field: \"id\"};\n                else if(this.inspire) opts = {save: this.inspire, field: \"inspire\"};\n                else if(this.arxiv) opts = {save: this.arxiv, field: \"arxiv\"};\n                else {\n                    reject(\"No identifier found to save the record.\");\n                    return;\n                }\n\n                opts.tags = this.tags;\n                opts.comments = this.comments;\n\n                mySpires.api(opts).then(function(results) {\n                    this.data(results[opts.save]);\n                    resolve();\n                }.bind(this)).catch(reject);\n            }.bind(this));\n        });\n        return this;\n    }\n\n    /**\n     * Removes an entry from user's library.\n     * @returns {mySpires_Record} Returns for chaining.\n     */\n    remove() {\n        this.busy = new Promise((resolve) => {\n            this.busy.then(function() { // Continue after last task has finished.\n                if(this.id) {\n                    mySpires.api({\n                        remove: this.id,\n                        field: \"id\"\n                    }).then(function(results) {\n                        this.data(results[this.id]);\n                        resolve();\n                    }.bind(this)).catch(console.log);\n                }\n            }.bind(this));\n        });\n        return this;\n    }\n}\n\nclass mySpires_Records\n{\n    /**\n     *\n     * @param {Object} records\n     */\n    constructor(records) {\n        for(let key of Object.keys(records)) {\n            this[key] = new mySpires_Record(records[key]);\n        }\n    }\n}"]}