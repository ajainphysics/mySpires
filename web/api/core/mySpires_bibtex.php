<?php
namespace mySpires\bibtex;

use library\bibtex\BibTeX;
use library\bibtex\BibTeX_Record;

use mySpires\Collaboration;
use mySpires\User;
use function mySpires\config;
use function mySpires\query;
use function mySpires\records\queryentries;
use function mySpires\users\username;

function add($bibtex, $username = null)  {
    if(!$username) $username = username();
    if(!$username) return false;

    $clean_bibtex = new BibTeX($bibtex);
    if(!$clean_bibtex->loaded) return false;

    foreach ($clean_bibtex->records as $bib) {
        $bibkey = $bib->key;
        $bibtex = $bib->bibtex();
        $title = $bib->field("title");
        $author = $bib->field("author");
        $eprint = $bib->field("eprint");
        $doi = $bib->field("doi");
        $year = $bib->field("year");

        $e = explode("doi.org/", $doi);
        if(sizeof($e)==2) $doi = $e[1];

        query("INSERT INTO custom_bibtex (username, bibkey, title, author, eprint, doi, year, bibtex) 
                       VALUES ('$username', '$bibkey', '$title', '$author', '$eprint', '$doi', '$year', '$bibtex')
                       ON DUPLICATE KEY UPDATE title = '$title', author = '$author', eprint = '$eprint', doi = '$doi', year = '$year', bibtex = '$bibtex', updated = NOW(), redundant = 1");
    }

    return true;
}

function remove($bibkeys, $username = null) {
    $bibkeys = implode(",", array_map(function($key){
        return "'". trim($key) . "'";
    }, explode(",", $bibkeys)));

    if(!$username) $username = username();
    if(!$username) return false;

    query("DELETE FROM custom_bibtex WHERE (bibkey IN ($bibkeys) AND username = '$username')");

    return true;
}

function bib($query, $type = "user") {
    if($type == "collaboration") {
        $collaboration = new Collaboration($query);
        $user_list = $collaboration->collaborators;

        $label = "mySpiresCollaboration/" . $collaboration->name;

        $bib_header = "%%% " . $label . "\n";
        $bib_header .= "%%% Generated by mySpires for collaboration " . $collaboration->name . "\n";
    }
    elseif ($type = "user") {
        $user_list = [$query];
        $e = explode(":", $query);
        $user = new User($e[0]);

        if(!$user) return null;

        if(sizeof($e) == 1 || !$e[1])
            $label = "mySpires/" . $user->username;
        else
            $label = "mySpires/" . $query;

        $bib_header = "%%% " . $label . "\n";
        $bib_header .= "%%% Generated by mySpires for " . $user->name . " (username: " . $user->username . ")\n";
    }
    else
        return null;

    $bib_array = [];
    $custom_bib_array = [];

    foreach($user_list as $user) {
        $e = explode(":", trim($user));
        $username = $e[0];

        if(array_key_exists("1", $e) && $tag = $e[1]) {
            $results = queryentries("tags LIKE '%%" . $tag . "%%'", $username);
            $results = array_filter($results, function($r) use($tag) {
                $tagArray = explode(",", $r->entry->tags);
                foreach ($tagArray as $db_tag) {
                    $db_tag = trim($db_tag);
                    if (strpos($db_tag, $tag . "/") === 0 || $db_tag == $tag) return true;
                }
                return false;
            });
        } else {
            $results = queryentries("", $username);
            $custom_bibs = query("SELECT * FROM custom_bibtex WHERE username = '$username'");
            while ($custom_bib = $custom_bibs->fetch_object()) {
                $custom_bib_array[$custom_bib->bibkey] = $custom_bib->bibtex;
            }
        }

        foreach($results as $result) $bib_array[$result->record->id] = trim($result->record->bibtex);
    }

    $filtered_bib_array = [];
    $custom_keys = array_keys($custom_bib_array);
    foreach ($bib_array as $bibtex) {
        $clean = new BibTeX_Record($bibtex);
        if($clean->loaded && !in_array($clean->key, $custom_keys)) {
            $filtered_bib_array[] = $clean->bibtex();
        }
    }

    $server = config("server");

    $bib_header .= "%%% Last updated: " . date('Y-m-d H:i:s') . "\n\n";
    $bib_header .= "% This file is automatically generated. Changes will not be retained.\n";
    $bib_header .= "% To add custom entries, visit " . $server->location . "bibtex.php.\n\n";

    if(sizeof($filtered_bib_array) + sizeof($custom_bib_array) == 0) return null;

    $bib = "";
    if(sizeof($custom_bib_array))
        $bib = $bib . "%% User-provided entries %%%%%\n\n" . implode("\n\n", $custom_bib_array) . "\n\n";
    if(sizeof($filtered_bib_array))
        $bib = $bib . "%% mySpires entries %%%%%%%%%%\n\n" . implode("\n\n", $filtered_bib_array);

    $normalizeChars = array(
        'Š'=>'S', 'š'=>'s', 'Ð'=>'Dj','Ž'=>'Z', 'ž'=>'z', 'À'=>'A', 'Á'=>'A', 'Â'=>'A', 'Ã'=>'A', 'Ä'=>'A',
        'Å'=>'A', 'Æ'=>'A', 'Ç'=>'C', 'È'=>'E', 'É'=>'E', 'Ê'=>'E', 'Ë'=>'E', 'Ì'=>'I', 'Í'=>'I', 'Î'=>'I',
        'Ï'=>'I', 'Ñ'=>'N', 'Ń'=>'N', 'Ò'=>'O', 'Ó'=>'O', 'Ô'=>'O', 'Õ'=>'O', 'Ö'=>'O', 'Ø'=>'O', 'Ù'=>'U', 'Ú'=>'U',
        'Û'=>'U', 'Ü'=>'U', 'Ý'=>'Y', 'Þ'=>'B', 'ß'=>'Ss','à'=>'a', 'á'=>'a', 'â'=>'a', 'ã'=>'a', 'ä'=>'a',
        'å'=>'a', 'æ'=>'a', 'ç'=>'c', 'è'=>'e', 'é'=>'e', 'ê'=>'e', 'ë'=>'e', 'ì'=>'i', 'í'=>'i', 'î'=>'i',
        'ï'=>'i', 'ð'=>'o', 'ñ'=>'n', 'ń'=>'n', 'ò'=>'o', 'ó'=>'o', 'ô'=>'o', 'õ'=>'o', 'ö'=>'o', 'ø'=>'o', 'ù'=>'u',
        'ú'=>'u', 'û'=>'u', 'ü'=>'u', 'ý'=>'y', 'þ'=>'b', 'ÿ'=>'y', 'ƒ'=>'f',
        'ă'=>'a', 'ș'=>'s', 'ț'=>'t', 'Ă'=>'A', 'Ș'=>'S', 'Ț'=>'T',
    );

    $bib = strtr($bib, $normalizeChars);

    $full_bib = $bib_header . $bib;

    $label_ = str_replace(":", "_", $label);
    $label_ = str_replace("/", "_", $label_);
    $label_ = str_replace(" ", "-", $label_);
    $filename = $label_ . ".bib";

    $saved_file_path = $server->content_root . "/bibtex/" . $filename;
    if(file_exists($saved_file_path))
        $saved_bib = file_get_contents($saved_file_path);
    else
        $saved_bib = "";

    $dropbox_upload = false;
    if($bib != $saved_bib) {
        foreach($user_list as $user) {
            $e = explode(":", trim($user));
            $user = new User($e[0]);

            if($user->dropbox()->upload($full_bib, "/bib/" . $filename)) {
                file_put_contents($saved_file_path, $bib);
                $dropbox_upload = true;
            }
        }
    }

    return (object)["filename" => $filename, "contents" => $full_bib, "dropbox" => $dropbox_upload];
}