{"version":3,"sources":["../refSpires.js"],"names":["InspireRecords","query","xopts","records","boldAuthor","split","length","temp","trim","busy","Promise","resolve","reject","RefSpires","fetch","then","results","record","push","InspireRecord","totResults","bind","catch","list","author","replace","ref","title","arxiv","data","keys","Object","key","opts","$","each","attr","JSON","parse","inspireRecords","refList","referenceList","i","itemId","itemIdPrefix","li","itemClasses","append","console","log","addClass","p","sf","of","so","rg","jrec","fields","addFields","otArray","fieldArray","field","ot","join","ajax","type","url","success","find","html","inspire","rawArxiv","rawInspire","rawSpires","slice","bibkey","authorsInverted","authors","authorInverted","abstract","date","published","Date","contents","filter","nodeType","e","Number","nodeValue","dataType","error"],"mappings":"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","file":"refSpires.js","sourcesContent":["\"use strict\";\n\nclass InspireRecords {\n    /**\n     *\n     * @param {string} query The query to search at Inspire.\n     * @param {Object} [xopts] Options.\n     * @param {string} [xopts.boldAuthor] The author name to bold in reference lists.\n     * @param {string} [xopts.sf] The sort format to use. [see INSPIRE-API]\n     * @param {string} [xopts.so] The sort order to use. [see INSPIRE-API]\n     * @param {number} [xopts.rg] Where to start search. [see INSPIRE-API]\n     * @param {number} [xopts.jrec] The chunk of data to return. [see INSPIRE-API]\n     * @param {string} [xopts.fields] Comma separated list of fields to search for.\n     * @param {string} [xopts.addFields] Add fields to the default ones.\n     */\n    constructor(query, xopts = {}) {\n        this.records = [];\n\n        this.boldAuthor = xopts.boldAuthor;\n        if(this.boldAuthor && this.boldAuthor.split(\",\").length === 2) {\n            let temp = this.boldAuthor.split(\",\");\n            this.boldAuthor = temp[1].trim() + \" \" + temp[0].trim();\n        }\n\n        this.busy = new Promise((resolve, reject) => {\n            RefSpires.fetch(query, xopts).then(function (results) {\n                this.records = [];\n                for(let record of results.records) {\n                    this.records.push(new InspireRecord(record));\n                }\n                this.totResults = results.totResults;\n                resolve();\n            }.bind(this)).catch(reject);\n        });\n    }\n\n    referenceList() {\n        let list = [];\n        for(let record of this.records) {\n            let author = record.author;\n            if(this.boldAuthor)\n                author = author\n                    .replace(this.boldAuthor, \"<strong>\" + this.boldAuthor + \"</strong>\");\n\n            let ref =\n                author + \", <em>\"\n                + record.title + \",</em> \"\n                + \"[<a href='https://arxiv.org/abs/\" + record.arxiv + \"'>arXiv:\"\n                + record.arxiv + \"</a>]\";\n\n            list.push(ref);\n        }\n\n        return list;\n    }\n}\n\n\nclass InspireRecord {\n    constructor(query, xopts = {}) {\n        if(typeof query === \"string\") {\n            this.busy = new Promise((resolve, reject) => {\n                RefSpires.fetch(query, xopts).then(function (results) {\n                    this.data = results.records[0];\n                    resolve();\n                }.bind(this)).catch(reject);\n            });\n        }\n        else {\n            this.data = query;\n            this.busy = Promise.resolve();\n        }\n\n        this.busy.then(() => {\n            let keys = Object.keys(this.data);\n            for(let key of keys) {\n                this[key] = this.data[key];\n            }\n        });\n    }\n}\n\nclass RefSpires {\n    static load() {\n        let opts = this.opts;\n        if(!opts) opts = {};\n\n        $(\".inspireList:not(.loaded)\").each(function() {\n            let query = $(this).attr(\"data-query\");\n            let xopts = $(this).attr(\"data-opts\");\n            if(xopts) {\n                xopts = JSON.parse(xopts);\n                let keys = Object.keys(xopts);\n                for(let key of keys) {\n                    opts[key] = xopts[key];\n                }\n            }\n\n            let inspireRecords = new InspireRecords(query, opts);\n\n            inspireRecords.busy.then(function() {\n                let refList = inspireRecords.referenceList();\n                let i = 0;\n                for(let ref of refList) {\n                    let itemId = \"\";\n                    if(opts.itemIdPrefix) {\n                        itemId = opts.itemIdPrefix + \"-\" + i++;\n                    }\n                    let li = \"<li id='\"\n                        + itemId\n                        + \"' class='\" + opts.itemClasses + \"'>\" + ref + \".</li>\";\n                    $(this).append(li);\n                }\n            }.bind(this)).catch(console.log);\n\n            $(this).addClass(\"loaded\");\n        });\n    }\n\n    /**\n     * Fetches results from INSPIRE and returns an xml.\n     * @param {string} query The query to search at Inspire.\n     * @param {Object} [xopts] Options.\n     * @param {string} [xopts.sf] The sort format to use. [see INSPIRE-API]\n     * @param {string} [xopts.so] The sort order to use. [see INSPIRE-API]\n     * @param {number} [xopts.rg] Where to start search. [see INSPIRE-API]\n     * @param {number} [xopts.jrec] The chunk of data to return. [see INSPIRE-API]\n     * @param {string} [xopts.fields] Comma separated list of fields to search for.\n     * @param {string} [xopts.addFields] Add fields to the default ones.\n     */\n    static fetch(query, xopts = {}) {\n        let opts = {\n            p: query + \" and ac 1->10\",\n            sf: \"earliestdate\",\n            of: \"xm\"\n        };\n\n        if(xopts.sf) opts.sf = xopts.sf; // If 'sort format' is provided, override.\n        if(xopts.so) opts.so = xopts.so; // If 'sort format' is provided, override.\n        if(xopts.rg) opts.rg = xopts.rg;\n        if(xopts.jrec) opts.jrec = xopts.jrec;\n\n        if(!xopts.fields) xopts.fields = \"arxiv,bibkey,title,author,date\";\n        if(xopts.addFields) xopts.fields = xopts.fields + \",\" + xopts.addFields;\n\n        let otArray = [\"909\"];\n        let fieldArray = xopts.fields.split(\",\");\n        for(let field of fieldArray) {\n            switch(field.trim()) {\n                case \"bibkey\":\n                case \"arxiv\":\n                    otArray.push(\"035,\");\n                    break;\n                case \"title\":\n                    otArray.push(\"245,\");\n                    break;\n                case \"author\":\n                case \"authors\":\n                    otArray.push(\"100,700,\");\n                    break;\n                case \"date\":\n                    otArray.push(\"269,260,502,\");\n                    break;\n                case \"abstract\":\n                    otArray.push(\"520,\");\n                    break;\n            }\n        }\n        opts.ot = otArray.join();\n\n        return new Promise((resolve, reject) => {\n            $.ajax({\n                type: \"GET\",\n                url: \"https://inspirehep.net/search\",\n                data: opts,\n                success: function(results) {\n                    let records = [];\n                    $(results).find(\"record\").each(function () {\n                        if($(this).find(\"[tag='909'] [code='p']\").html() !== \"INSPIRE:HEP\") return true;\n\n                        let record = {};\n\n                        // Inspire ID\n                        record.inspire = $(this).find(\"[tag='001']\").html();\n\n                        // Identifiers\n                        let rawArxiv, rawInspire, rawSpires;\n                        $(this).find(\"[tag='035']\").each(function() {\n                            if($(this).find(\"[code='9']\").html() === \"arXiv\") {\n                                rawArxiv = $(this).find(\"[code='a']\").html();\n                            } else if($(this).find(\"[code='9']\").html() === \"INSPIRETeX\") {\n                                rawInspire = $(this).find(\"[code='a']\").html();\n                            } else if($(this).find(\"[code='9']\").html() === \"SPIRESTeX\") {\n                                rawSpires = $(this).find(\"[code='a']\").html();\n                            }\n                        });\n                        if(rawArxiv) record.arxiv = rawArxiv.split(\":\").slice(-1)[0];\n                        if(rawInspire) record.bibkey = rawInspire;\n                        else if(rawSpires) record.bibkey = rawSpires;\n\n                        // Title\n                        let title = $(this).find(\"[tag='245'] [code='a']\").html();\n                        if(title) record.title = title;\n\n                        // Authors\n                        let authorsInverted = [],\n                            authors = [];\n                        $(this).find(\"[tag='100'], [tag='700']\").each(function() {\n                            let authorInverted = $(this).find(\"[code='a']\").html();\n                            authorsInverted.push(authorInverted);\n                            let temp = authorInverted.split(\",\");\n                            if(temp.length > 1) authors.push(temp[1].trim() + \" \" + temp[0].trim());\n                            else authors.push(authorInverted);\n                        });\n                        if(authors.length > 0) {\n                            record.authorsInverted = authorsInverted;\n                            record.authors = authors;\n                            record.author = authors.join(\", \");\n                        }\n\n                        // Abstract\n                        let abstract = $(this).find(\"[tag='520'] [code='a']\").html();\n                        if(abstract) record.abstract = abstract;\n\n                        // Date\n                        let date = $(this).find(\"[tag='269'] [code='c']\").html();\n                        if(!date) date = $(this).find(\"[tag='260'] [code='c']\").html();\n                        if(!date) date = $(this).find(\"[tag='502'] [code='d']\").html();\n                        if(date) {\n                            switch (date.split(\"-\").length) {\n                                case 1:\n                                    date = date + \"-01-01\";\n                                    break;\n                                case 2:\n                                    date = date + \"-01\";\n                                    break;\n                            }\n\n                            record.published = date;\n                            record.date = new Date(date);\n                        }\n\n                        records.push(record);\n                    });\n\n                    let totResults = 0;\n                    $(results).contents().filter(function () {\n                        return this.nodeType === 8;\n                    }).each(function (i, e) {\n                        totResults = Number(e.nodeValue.split(\"Search-Engine-Total-Number-Of-Results:\")[1].trim());\n                    });\n\n                    resolve({records: records, totResults: totResults});\n                },\n                dataType: \"xml\",\n                error: reject\n            });\n        })\n    }\n}\n"]}